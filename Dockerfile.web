# Use Node.js 18 with Alpine as the base image
FROM node:18-alpine


# Accept build arguments from the GitHub Actions workflow
ARG NEXTAUTH_SECRET
ARG NEXTAUTH_URL
ARG NEXT_PUBLIC_BACKEND_URL
ARG NEXT_PUBLIC_SDR_URL
ARG AZURE_AD_CLIENT_ID
ARG AZURE_AD_CLIENT_SECRET
ARG AZURE_AD_TENANT_ID

# Set them as environment variables in the container
ENV NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
ENV NEXTAUTH_URL=${NEXTAUTH_URL}
ENV NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
ENV NEXT_PUBLIC_SDR_URL=${NEXT_PUBLIC_SDR_URL}
ENV AZURE_AD_CLIENT_ID=${AZURE_AD_CLIENT_ID}
ENV AZURE_AD_CLIENT_SECRET=${AZURE_AD_CLIENT_SECRET}
ENV AZURE_AD_TENANT_ID=${AZURE_AD_TENANT_ID}

# Rest of your Dockerfile instructions


# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json first (to take advantage of Docker caching)
COPY package*.json ./

# Install the production dependencies (omit dev dependencies)
RUN npm ci --omit=dev

# Copy the backend code to the container's working directory
COPY backend ./backend

# Expose port 9000 for the web application
EXPOSE 9000

# Define the command to run your backend application
CMD ["node", "backend/server.js"]
